#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>

//I me mine
// Using Alexey's Entries to search
struct Backup
{
    char back1[200];
	char back2[200];
	char back3[200];
	char back4[200];
	char back5[200];
	char back6[200];
	char back7[200];
	char back8[200];
	char back9[200];
	char back10[200];
	char back11[200];
	char back12[200];
	char back13[200];
	char back14[200];
	char back15[200];
};

struct Entries
{
	char Entry[99][251];
    char View[99][251];
    int length[99];
    int find[99];
};

struct User
{
    char NewUserName[100];
    char NewPassword[100];
};

struct User newUser;
int userRegistered = 0;

void save_user(struct User user) //text file to save a new user and password
{
    FILE *file = fopen("Users.txt", "w");
    if(file == NULL)
    {
        printf("File error \n");
        return;
    }
    fprintf(file, "%s\n%s\n", user.NewUserName, user.NewPassword);
    fclose(file);
}

int get_user(struct User *user, char *username)
{
    FILE *file = fopen("Users.txt", "r");
    if(file == NULL)
    {
        return 0;
    }

    char tempUser[100];
    char tempPassword[100];
    while(fscanf(file, "%s\n%s\n", tempUser, tempPassword) != EOF)
    {
        if(strcmp(tempUser, username) == 0)
        {
            strcpy(user->NewUserName, tempUser);
            strcpy(user->NewPassword, tempPassword);
            fclose(file);
            return 1;
        }
    }
    fclose(file);
    return 0;
}

void register_for_scribble() //allows the user to register with a username and password
{
    printf("Create a Username: ");
    scanf("%s", newUser.NewUserName);

    if(check_user(newUser.NewUserName))
    {
        printf("Username is already taken. Try another one.\n");
        return;
    }

    printf("Create a Password: ");
    scanf("%s", newUser.NewPassword);

    save_user(newUser);

    printf("\nUser has been registered! \n");
    
}

int check_user(char *username)
{
    FILE *file = fopen("Users.txt", "r");
    if(file == NULL)
    {
        return 0;
    }
    char tempUser[100];
    while(fscanf(file, "%s\n%s\n", tempUser, NULL) != EOF){
    if(strcmp(tempUser, username) == 0)
    {
        fclose(file);
        return 1;
    }
}

fclose(file);
return 0;
}

int login() //Uses the users information from registering to login
{
struct User loginUser;
printf("Enter Username: \n");
scanf("%s", loginUser.NewUserName);

printf("Enter Password: \n");
scanf("%s", loginUser.NewPassword);

struct User storedUser;
if(!get_user(&storedUser, loginUser.NewUserName))
{
    printf("No user registered, please register.\n");
    return 0;
}

if(strcmp(loginUser.NewUserName, storedUser.NewUserName) == 0 && 
    strcmp(loginUser.NewPassword, storedUser.NewPassword) == 0){
        printf("\nLogin successful! \n");
        return 1;
    }else{
        printf("Wrong Username and Password. \n");
        return 0;
    }

}

void create_new_entry(struct Entries* e) //opens all file in read mode to check if file is empty
{
    printf("Entries should not exceed 250 characters(including spaces) limit\n");
    int count = 0;
    FILE *entries;
    FILE *view;
    FILE *backup;

    entries=fopen("entries.txt", "r");
    view=fopen("view.txt", "r");
    backup=fopen("backup.txt","r");

    if(view==NULL)
    {
    printf("File for search can't be opened");
    return;
    }
    if(entries==NULL)
    {
    printf("File for entry can't be opened");
    return;
    }
    if(backup==NULL)
    {
    printf("File for backup can't be opened");
    return;
    }

    fseek(entries, 0, SEEK_END);
    fseek(backup, 0, SEEK_END);
    int sizeE = ftell(entries);
    int sizeB = ftell(backup);

    for(int i=0; i<99; i++)
    {
    fscanf(view, "%d", &e->length[i]);
    }

    fclose(entries);
    fclose(view);
    fclose(backup);

    /*if main entry or back file is empty, uses write and read to avoid new line character at the 
    beginning and append mode if there are other entries to avoid overwriting*/
    if(sizeE==0 || sizeB==0) 
    {
        backup=fopen("backup.txt", "w+");
        entries=fopen("entries.txt", "w+");
        view=fopen("view.txt", "w+");
    }
    else
    {
        backup=fopen("backup.txt", "a+");
        entries=fopen("entries.txt", "a+");
        view=fopen("view.txt", "a+");
    }

    //increments count variable everytime length of the entry does not equal 0 to keep track of current entry year
    for(int i=0; i<99; i++)
        {
            if (e->length[i]!=0)
            {
            count++;
            }
        }

	for(int i=0; i<99; i++)
    {
        if(strlen( e->Entry[i])==0)
        {
            printf("Make the entry%d: ", count);
            fgets(e->Entry[i], sizeof(e->Entry[i]), stdin); //checks for character limit

            int l=strlen(e->Entry[i]);
            if(l>250)
            {
                printf("You exceeded allowed characters number");
                int clear;
                while ((clear = getchar()) != '\n' && clear != EOF);
                fclose(backup);
                fclose(entries);
                fclose(view);
                return;
            }

    //deletes new lien character which came due fgets function from the array of entries lengths, to have accurate length of each array
            e->Entry[i][strcspn(e->Entry[i], "\n")] = 0;
            e->length[i]=strlen(e->Entry[i]);

            fprintf(entries, "%s\n", e->Entry[i]);
            fprintf(backup,"%s\n", e->Entry[i]);
            fprintf(view, "%d\n",e->length[i]);
            break;
        }
    }

    fclose(view);
    fclose(entries);
    fclose(backup);
}
void view_entry(struct Entries* e)
{
    int stringlocation;
    int count=0;
    int userinput;
    FILE *entries;
    FILE *view;
    FILE *backup;
    entries=fopen("entries.txt", "r");
    view=fopen("view.txt", "r");
    backup=fopen("backup.txt","r");
    if(view==NULL)
    {
    printf("File for search can't be opened");
    return;
    }

    //this is made in case if main entry file cannot be access, so program would grab data from backup file
    if(entries==NULL)
    {
    printf("File for viewing entries can't be opened\n");
    printf("Loading backup file\n");
    printf("choose entry from 1 to 99: ");
    scanf("%d", &userinput);
    if(userinput<1 || userinput>99)
    {
        printf("Error, Invalid entry number");
    }
    for(int i=0; i<userinput; i++)
    {
    fscanf(view, "%d", &e->length[i]);
    }
    for(int i=0; i<userinput-1; i++)
    {
        if (e->length[i]!=0)
        {
        count++;
        stringlocation+=e->length[i]+1;
        }
    }
    if(userinput==1)
    {
    fseek(backup, 0, SEEK_SET);
    fgets(e->View[count],sizeof(e->View[count]), backup);
    if(strlen(e->View[count])==0)
    {
        printf("Entry%d doesn't exist", userinput);
        return;
    }
    printf("Entry1 is: %s", e->View[count]);
    }
    else
    {
        fseek(entries, stringlocation-1, SEEK_SET);
        fgets(e->View[count],sizeof(e->View[count]), backup);
        if(strlen(e->View[count])==0)
        {
            printf("Entry%d doesn't exist", userinput);
            return;
        }
        printf("Entry%d is: %s",userinput, e->View[count]);
    }
    fclose(view);
    fclose(entries);
    fclose(backup);
    }
    printf("choose entry from 1 to 99: ");
    scanf("%d", &userinput);
    if(userinput<1 || userinput>99)
    {
        printf("Error, Invalid entry number");
    }
    for(int i=0; i<userinput; i++) //grabs entry byte size from the length file
    {
    fscanf(view, "%d", &e->length[i]);
    }
    for(int i=0; i<userinput-1; i++) // makes summation of each entry byte size desired entry to find entry's byte location from beginning of the view file
    {
        if (e->length[i]!=0)
        {
        count++;
        stringlocation+=e->length[i]+1;
        }
    }
    if(userinput==1)
    {
    fseek(entries, 0, SEEK_SET);
    fgets(e->View[count],sizeof(e->View[count]), entries);
    if(strlen(e->View[count])==0)
    {
        printf("Entry%d doesn't exist", userinput);
        return;
    }
    printf("Entry1 is: %s", e->View[count]);
    }
    else
    {
        //finds entry location in the file and scans entire line into local array and prints result to user
        fseek(entries, stringlocation-1, SEEK_SET);
        fgets(e->View[count],sizeof(e->View[count]), entries);
        if(strlen(e->View[count])==0)
        {
            printf("Entry%d doesn't exist", userinput);
            return;
        }
        printf("Entry%d is: %s",userinput, e->View[count]);
    }
    fclose(view);
    fclose(entries);
    fclose(backup);
}

void edit_entry(struct Entries* e)
{
    printf("Enter the entry you want to edit (1-99): ");
    int entry_num;
    scanf("%d", &entry_num);
    getchar();

    if(entry_num <1 || entry_num > 99 || e->length[entry_num - 1]==0)
    {
    printf("Invalid entry number. \n");
    return;
}

printf("Current entry: %s\n", e->Entry[entry_num - 1]);
printf("Enter the new entry for %d (max 250 characters): ", entry_num);
char new_entry[251];
fgets(new_entry, sizeof(new_entry),stdin);

int l = strlen(new_entry); //check length of new entry
if(l > 250)
{
    printf("The entry is too long\n");
    int clear;
    while((clear = getchar()) != '\n' && clear != EOF);
    return;
}

new_entry[strcspn(new_entry, "\n")] = 0;

//updates entry with new entry
strcpy(e->Entry[entry_num - 1], new_entry);
e->length[entry_num -1] = strlen(new_entry);

//new entries go back to files
FILE *entries = fopen("entries.txt", "w");
FILE *view = fopen("view.txt", "w");
FILE *backup = fopen("backup.txt", "w");

if(entries == NULL || view == NULL || backup == NULL)
{
    printf("Error opening files for writing. \n");
    if (entries) fclose(entries);
    if (view) fclose(view);
    if(backup) fclose(backup);
    return;
}

for(int i = 0; i < 99; i++)
{
    if(e->length[i] != 0)
    {
        fprintf(entries, "%s\n", e->Entry[i]);
        fprintf(view, "%s\n", e->Entry[i]);
        fprintf(backup, "%d\n", e->length[i]);

    }
}

fclose(entries);
fclose(view);
fclose(backup);

printf("Entry %d update sucessfully.\n", entry_num);

}

void search_entry(struct Entries* e)
{
    printf("Enter a keyword to search an entry: ");
    char keyword[251];
    fgets(keyword, sizeof(keyword),stdin);
    keyword[strcspn(keyword, "\n")] = 0;

    FILE *entries = fopen("entries.txt", "r");
    if(entries == NULL)
    {
        printf("Files for entries can't be opened\n");
        return;
    }

    char line[251];
    int entry_num = 1;
    int f = 0;

    while (fgets(line, sizeof(line), entries) != NULL)
    {
        line[strcspn(line, "\n")] != 0;  //remove new line character
        if(strstr(line, keyword) != NULL)
        {
            printf("Entry %d: %s\n", entry_num, line);
            f = 1;
        }
        entry_num++;
    }

    if(!f)
    {
        printf("No entries were found \"%s\".\n", keyword);
    }
    
    fclose(entries);
}





void exit_the_program() 
{
printf("Of course, ciao\n");
exit(0); 
}
void error_message()
{
    printf("This page is currently unavailable\n");
    printf("If you need further help please call 817-739-3672 and ask for Arthur ");
}
void calendar()
{
    printf("           AUGUST          \n");
    printf("Sun Mon Tue Wed Thu Fri Sat\n");
    printf("--- --- --- --- --- --- ---\n");
    printf("                  1   2   3\n");
    printf("  4   5   6  (7)  8   9  10\n");
    printf(" 11  12  13  14  15  16  17\n");
    printf(" 18  19  20  21  22  23  24\n");
    printf(" 25  26  27  28  29  30  31\n");
    printf("--- --- --- --- --- --- ---\n");
}

void help()
{
printf("\n If you need further assistance, please call 817-739-3672 and ask for Arthur. \n");
}

int main ()
{
    char entry[100];
    char name[100];
    int choice; 
    char password[100];
    char user_name[100]; 
    char user_password[100];
    struct Entries e = {"","","","","","","","","","","","","","",""};
    struct Backup b = {"","","","","","","","","","","","","","",""};
    struct Entries entries;
    memset(&entries, 0, sizeof(entries));


  printf("  ____________             __________\n");
    printf(" /           /\\           /         /|\n");
    printf("/___________/  \\        /__________/ |\n");
    printf("|           \\   \\      /           | |\n");
    printf("|            \\   \\    /            | |\n");
    printf("|             \\   \\  /             | |\n");
    printf("|              \\   \\/              | |    * *\n");
    printf("|                \\/      **        | |  *   *\n");
    printf("|                    * *  *    *   | |*   *\n");
    printf("|                    *  *     *  * | *  *\n");
    printf("|                  *  ** *     *  * *  *\n");
    printf("|           |\\    * * /|* *     *  *  *\n");
    printf("|           | \\      / | * *     *   *\n");
    printf("|           |  \\    /  |  * *     ***|\n");
    printf("|           |  | \\/    |    *      | |\n");
    printf("|           |  |       |           | |\n");
    printf("|           |  |       |           | |\n");
    printf("|           |  |       |           | |\n");
    printf("|___________| /        |___________|/\n");
    printf("Hello welcome to scribble\n");


	int choices;
	while(1)
	{
		
			printf("\nWelcome to Scribble!\n\n");
			printf("1. Register\n");
			printf("2. Login\n");
			printf("3. Create Diary Entry\n");
			printf("4. View Diary Entries\n");
			printf("5. Edit Diary Entry\n");
			printf("6. Search Diary Entries\n");
			printf("7. View Calendar\n");
			printf("8. Backup Entries\n");
			printf("9. Help\n");
			printf("10. Exit\n");
			printf("Enter your choice: ");
			scanf("%d", &choice);
			getchar();

			switch (choice)
			{
			case 1:
				register_for_scribble();
				break;
			case 2:
				if(login())
                {
                    struct Entries entries;
                    memset(&entries, 0, sizeof(entries)); //initialize the structure

                    while(1)
                    {
                        printf("\nMenu:\n");
                        printf("1. Create new entry\n");
                        printf("2. View and entry\n");
                        printf("3. Edit and entry\n");
                        printf("4. Search entries\n");
                        printf("5. Calendar\n");
                        printf("6. Backup Entries\n");
                        printf("7. Help\n");
                        printf("8. Exit\n");
                        printf("What would you like to do? (enter a number): \n");
                        scanf("%d", &choices);
                        getchar();

                        switch(choices)
                        {
                            case 1:
                            create_new_entry(&e);
                            break;
                            case 2:
                            view_entry(&e);
                            break;
                            case 3:
                            edit_entry(&e);
                            break;
                            case 4:
                            search_entry(&e);
                            break;
                            case 5:
                            calendar();
                            break;
                            case 6:
                            //Backup();
                            break;
                            case 7:
                            help();
                            break;
                            case 8:
                            return 0;
                            default:
                            printf("Invalid choice. Please try again. \n");

                        }
                    }
                }
				break;
                case 3:
                return 0;
                default:
                printf("Invalid choice. Please try again. \n");
            }
    }
    return 0;
}
			

		
